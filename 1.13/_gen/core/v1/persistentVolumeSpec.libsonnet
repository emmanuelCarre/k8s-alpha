{
  withAccessModes(accessModes): { accessModes: if std.isArray(v=accessModes) then accessModes else [accessModes] },
  withAccessModesMixin(accessModes): { accessModes+: if std.isArray(v=accessModes) then accessModes else [accessModes] },
  withAwsElasticBlockStore(awsElasticBlockStore): { awsElasticBlockStore: awsElasticBlockStore },
  withAzureDisk(azureDisk): { azureDisk: azureDisk },
  withAzureFile(azureFile): { azureFile: azureFile },
  withCapacity(capacity): { capacity: capacity },
  withCapacityMixin(capacity): { capacity+: capacity },
  withCephfs(cephfs): { cephfs: cephfs },
  withCinder(cinder): { cinder: cinder },
  withClaimRef(claimRef): { claimRef: claimRef },
  withCsi(csi): { csi: csi },
  withFc(fc): { fc: fc },
  withFlexVolume(flexVolume): { flexVolume: flexVolume },
  withFlocker(flocker): { flocker: flocker },
  withGcePersistentDisk(gcePersistentDisk): { gcePersistentDisk: gcePersistentDisk },
  withGlusterfs(glusterfs): { glusterfs: glusterfs },
  withHostPath(hostPath): { hostPath: hostPath },
  withIscsi(iscsi): { iscsi: iscsi },
  withLocal(local): { 'local': local },
  withMountOptions(mountOptions): { mountOptions: if std.isArray(v=mountOptions) then mountOptions else [mountOptions] },
  withMountOptionsMixin(mountOptions): { mountOptions+: if std.isArray(v=mountOptions) then mountOptions else [mountOptions] },
  withNfs(nfs): { nfs: nfs },
  withNodeAffinity(nodeAffinity): { nodeAffinity: nodeAffinity },
  withPersistentVolumeReclaimPolicy(persistentVolumeReclaimPolicy): { persistentVolumeReclaimPolicy: persistentVolumeReclaimPolicy },
  withPhotonPersistentDisk(photonPersistentDisk): { photonPersistentDisk: photonPersistentDisk },
  withPortworxVolume(portworxVolume): { portworxVolume: portworxVolume },
  withQuobyte(quobyte): { quobyte: quobyte },
  withRbd(rbd): { rbd: rbd },
  withScaleIO(scaleIO): { scaleIO: scaleIO },
  withStorageClassName(storageClassName): { storageClassName: storageClassName },
  withStorageos(storageos): { storageos: storageos },
  withVolumeMode(volumeMode): { volumeMode: volumeMode },
  withVsphereVolume(vsphereVolume): { vsphereVolume: vsphereVolume },
  mixin: self
}